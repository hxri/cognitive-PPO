tensor([3, 6, 4, 1])
tensor([3, 6, 4, 1])
tensor([1, 3, 2, 2])
tensor([1, 3, 2, 2])
global_step=8, episodic_return=[-1.]
tensor([0, 5, 6, 4])
tensor([0, 5, 6, 4])
tensor([2, 6, 3, 1])
tensor([2, 6, 3, 1])
global_step=16, episodic_return=[-1.]
tensor([2, 0, 1, 2])
tensor([2, 0, 1, 2])
tensor([5, 4, 0, 3])
tensor([5, 4, 0, 3])
tensor([5, 4, 4, 4])
tensor([5, 4, 4, 4])
tensor([1, 0, 6, 5])
tensor([1, 0, 6, 5])
tensor([5, 5, 3, 2])
tensor([5, 5, 3, 2])
global_step=36, episodic_return=[-1.]
tensor([5, 3, 1, 5])
tensor([5, 3, 1, 5])
tensor([2, 3, 3, 2])
tensor([2, 3, 3, 2])
global_step=44, episodic_return=[-1.]
tensor([1, 5, 0, 5])
tensor([1, 5, 0, 5])
tensor([2, 0, 4, 3])
tensor([2, 0, 4, 3])
tensor([1, 1, 5, 3])
tensor([1, 1, 5, 3])
tensor([6, 2, 3, 6])
tensor([6, 2, 3, 6])
tensor([0, 0, 2, 1])
tensor([0, 0, 2, 1])
global_step=64, episodic_return=[-1.]
tensor([1, 4, 2, 1])
tensor([1, 4, 2, 1])
tensor([4, 1, 0, 0])
tensor([4, 1, 0, 0])
tensor([0, 1, 1, 5])
tensor([0, 1, 1, 5])
tensor([4, 3, 3, 2])
tensor([4, 3, 3, 2])
tensor([6, 4, 0, 6])
tensor([6, 4, 0, 6])
tensor([5, 1, 5, 1])
tensor([5, 1, 5, 1])
tensor([0, 3, 4, 1])
tensor([0, 3, 4, 1])
tensor([4, 0, 6, 5])
tensor([4, 0, 6, 5])
tensor([1, 4, 3, 6])
tensor([1, 4, 3, 6])
tensor([3, 2, 1, 2])
tensor([3, 2, 1, 2])
global_step=104, episodic_return=[-1.]
tensor([1, 2, 5, 6])
tensor([1, 2, 5, 6])
tensor([4, 6, 1, 5])
tensor([4, 6, 1, 5])
tensor([4, 3, 6, 4])
tensor([4, 3, 6, 4])
tensor([3, 2, 1, 1])
tensor([3, 2, 1, 1])
tensor([5, 5, 3, 3])
tensor([5, 5, 3, 3])
tensor([1, 4, 0, 2])
tensor([1, 4, 0, 2])
tensor([3, 3, 4, 6])
tensor([3, 3, 4, 6])
tensor([0, 5, 0, 1])
tensor([0, 5, 0, 1])
tensor([5, 4, 3, 3])
tensor([5, 4, 3, 3])
tensor([5, 4, 4, 4])
tensor([5, 4, 4, 4])
tensor([0, 5, 5, 4])
tensor([0, 5, 5, 4])
tensor([3, 5, 1, 2])
tensor([3, 5, 1, 2])
global_step=152, episodic_return=[-1.]
tensor([5, 1, 4, 3])
tensor([5, 1, 4, 3])
tensor([4, 2, 3, 4])
tensor([4, 2, 3, 4])
global_step=160, episodic_return=[-1.]
tensor([5, 0, 6, 0])
tensor([5, 0, 6, 0])
tensor([4, 1, 4, 5])
tensor([4, 1, 4, 5])
tensor([2, 3, 0, 2])
tensor([2, 3, 0, 2])
tensor([4, 3, 0, 6])
tensor([4, 3, 0, 6])
tensor([2, 0, 4, 3])
tensor([2, 0, 4, 3])
global_step=180, episodic_return=[-1.]
tensor([6, 0, 6, 2])
tensor([6, 0, 6, 2])
global_step=184, episodic_return=[-1.]
tensor([0, 1, 3, 2])
tensor([0, 1, 3, 2])
tensor([6, 0, 5, 4])
tensor([6, 0, 5, 4])
tensor([5, 6, 1, 1])
tensor([5, 6, 1, 1])
tensor([1, 5, 2, 0])
tensor([1, 5, 2, 0])
tensor([5, 0, 5, 1])
tensor([5, 0, 5, 1])
tensor([6, 0, 1, 4])
tensor([6, 0, 1, 4])
tensor([4, 4, 3, 1])
tensor([4, 4, 3, 1])
tensor([3, 2, 0, 4])
tensor([3, 2, 0, 4])
global_step=216, episodic_return=[-1.]
tensor([4, 6, 4, 3])
tensor([4, 6, 4, 3])
tensor([5, 5, 2, 4])
tensor([5, 5, 2, 4])
tensor([5, 4, 4, 1])
tensor([5, 4, 4, 1])
tensor([3, 2, 2, 1])
tensor([3, 2, 2, 1])
tensor([6, 0, 5, 5])
tensor([6, 0, 5, 5])
tensor([2, 0, 1, 1])
tensor([2, 0, 1, 1])
tensor([1, 2, 2, 4])
tensor([1, 2, 2, 4])
tensor([3, 1, 2, 3])
tensor([3, 1, 2, 3])
tensor([0, 3, 6, 4])
tensor([0, 3, 6, 4])
tensor([6, 5, 2, 1])
tensor([6, 5, 2, 1])
tensor([4, 2, 2, 4])
tensor([4, 2, 2, 4])
global_step=260, episodic_return=[-1.]
tensor([0, 0, 3, 5])
tensor([0, 0, 3, 5])
tensor([1, 1, 3, 0])
tensor([1, 1, 3, 0])
tensor([0, 3, 2, 5])
tensor([0, 3, 2, 5])
global_step=272, episodic_return=[-1.]
tensor([4, 5, 5, 3])
tensor([4, 5, 5, 3])
tensor([2, 4, 3, 4])
tensor([2, 4, 3, 4])
global_step=280, episodic_return=[-1.]
tensor([5, 1, 2, 2])
tensor([5, 1, 2, 2])
global_step=284, episodic_return=[-1.]
tensor([0, 6, 3, 3])
tensor([0, 6, 3, 3])
tensor([5, 6, 3, 1])
tensor([5, 6, 3, 1])
tensor([4, 1, 0, 4])
tensor([4, 1, 0, 4])
tensor([5, 4, 5, 6])
tensor([5, 4, 5, 6])
tensor([0, 0, 4, 0])
tensor([0, 0, 4, 0])
tensor([0, 4, 4, 4])
tensor([0, 4, 4, 4])
tensor([3, 4, 0, 5])
tensor([3, 4, 0, 5])
tensor([2, 5, 1, 1])
tensor([2, 5, 1, 1])
tensor([1, 4, 4, 0])
tensor([1, 4, 4, 0])
tensor([0, 4, 6, 0])
tensor([0, 4, 6, 0])
tensor([3, 3, 2, 1])
tensor([3, 3, 2, 1])
tensor([0, 1, 2, 0])
tensor([0, 1, 2, 0])
tensor([2, 4, 4, 5])
tensor([2, 4, 4, 5])
tensor([2, 4, 5, 1])
tensor([2, 4, 5, 1])
global_step=340, episodic_return=[-1.]
tensor([1, 2, 4, 6])
tensor([1, 2, 4, 6])
tensor([5, 6, 6, 6])
tensor([5, 6, 6, 6])
tensor([6, 1, 0, 3])
tensor([6, 1, 0, 3])
tensor([4, 6, 1, 2])
tensor([4, 6, 1, 2])
global_step=356, episodic_return=[-1.]
tensor([6, 4, 2, 5])
tensor([6, 4, 2, 5])
tensor([2, 4, 5, 5])
tensor([2, 4, 5, 5])
tensor([1, 5, 5, 1])
tensor([1, 5, 5, 1])
tensor([4, 3, 1, 5])
tensor([4, 3, 1, 5])
tensor([3, 4, 3, 1])
tensor([3, 4, 3, 1])
tensor([2, 0, 5, 0])
tensor([2, 0, 5, 0])
tensor([4, 6, 3, 0])
tensor([4, 6, 3, 0])
tensor([5, 2, 6, 4])
tensor([5, 2, 6, 4])
tensor([1, 1, 5, 4])
tensor([1, 1, 5, 4])
tensor([3, 1, 4, 4])
tensor([3, 1, 4, 4])
tensor([1, 6, 1, 2])
tensor([1, 6, 1, 2])
global_step=400, episodic_return=[-1.]
tensor([5, 0, 6, 2])
tensor([5, 0, 6, 2])
tensor([3, 6, 2, 2])
tensor([3, 6, 2, 2])
tensor([6, 0, 2, 1])
tensor([6, 0, 2, 1])
tensor([6, 0, 5, 6])
tensor([6, 0, 5, 6])
tensor([6, 1, 2, 5])
tensor([6, 1, 2, 5])
tensor([0, 6, 0, 4])
tensor([0, 6, 0, 4])
tensor([1, 0, 0, 3])
tensor([1, 0, 0, 3])
tensor([6, 4, 1, 3])
tensor([6, 4, 1, 3])
tensor([5, 0, 5, 1])
tensor([5, 0, 5, 1])
tensor([0, 3, 0, 2])
tensor([0, 3, 0, 2])
tensor([2, 6, 6, 2])
tensor([2, 6, 6, 2])
tensor([6, 3, 4, 3])
tensor([6, 3, 4, 3])
tensor([0, 0, 1, 3])
tensor([0, 0, 1, 3])
tensor([2, 4, 2, 0])
tensor([2, 4, 2, 0])
tensor([2, 0, 3, 0])
tensor([2, 0, 3, 0])
tensor([3, 6, 6, 4])
tensor([3, 6, 6, 4])
tensor([4, 4, 4, 2])
tensor([4, 4, 4, 2])
tensor([3, 3, 4, 2])
tensor([3, 3, 4, 2])
tensor([0, 5, 3, 1])
tensor([0, 5, 3, 1])
tensor([1, 0, 3, 3])
tensor([1, 0, 3, 3])
tensor([1, 4, 3, 1])
tensor([1, 4, 3, 1])
tensor([4, 4, 1, 4])
tensor([4, 4, 1, 4])
tensor([3, 6, 5, 5])
tensor([3, 6, 5, 5])
tensor([2, 3, 6, 0])
tensor([2, 3, 6, 0])
global_step=496, episodic_return=[-1.]
tensor([2, 0, 0, 4])
tensor([2, 0, 0, 4])
tensor([1, 1, 4, 4])
tensor([1, 1, 4, 4])
tensor([2, 6, 2, 6])
tensor([2, 6, 2, 6])
tensor([2, 2, 3, 4])
tensor([2, 2, 3, 4])
SPS:  97
tensor([6, 0, 0, 6])
tensor([6, 0, 0, 6])
tensor([3, 0, 3, 5])
tensor([3, 0, 3, 5])
tensor([5, 1, 0, 1])
tensor([5, 1, 0, 1])
tensor([6, 3, 6, 2])
tensor([6, 3, 6, 2])
tensor([6, 3, 5, 2])
tensor([6, 3, 5, 2])
tensor([0, 5, 1, 6])
tensor([0, 5, 1, 6])
tensor([6, 5, 4, 1])
tensor([6, 5, 4, 1])
tensor([0, 0, 5, 2])
tensor([0, 0, 5, 2])
tensor([4, 1, 6, 3])
tensor([4, 1, 6, 3])
tensor([1, 2, 2, 3])
tensor([1, 2, 2, 3])
tensor([6, 1, 6, 1])
tensor([6, 1, 6, 1])
tensor([1, 2, 2, 2])
tensor([1, 2, 2, 2])
global_step=560, episodic_return=[-1.]
tensor([5, 6, 2, 4])
tensor([5, 6, 2, 4])
global_step=564, episodic_return=[-1.]
tensor([2, 3, 3, 0])
tensor([2, 3, 3, 0])
tensor([3, 0, 6, 4])
tensor([3, 0, 6, 4])
tensor([4, 4, 5, 0])
tensor([4, 4, 5, 0])
tensor([3, 3, 3, 2])
tensor([3, 3, 3, 2])
tensor([2, 1, 5, 6])
tensor([2, 1, 5, 6])
tensor([4, 2, 2, 4])
tensor([4, 2, 2, 4])
global_step=588, episodic_return=[-1.]
tensor([3, 3, 1, 5])
tensor([3, 3, 1, 5])
tensor([4, 1, 6, 3])
tensor([4, 1, 6, 3])
tensor([0, 2, 2, 4])
tensor([0, 2, 2, 4])
tensor([2, 6, 4, 2])
tensor([2, 6, 4, 2])
global_step=604, episodic_return=[-1.]
tensor([3, 6, 0, 6])
tensor([3, 6, 0, 6])
Traceback (most recent call last):
  File "D:\Masters\Projects\thesis\cognitive-PPO\playground.py", line 288, in <module>
    action, logprob, _, value = agent.get_action_and_value(next_obs)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\Masters\Projects\thesis\cognitive-PPO\playground.py", line 71, in get_action_and_value
    x = self.conv(x.permute(0, 3, 1, 2))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\hxri\miniconda3\envs\cogppo\Lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\hxri\miniconda3\envs\cogppo\Lib\site-packages\torch\nn\modules\container.py", line 217, in forward
    input = module(input)
            ^^^^^^^^^^^^^
  File "C:\Users\hxri\miniconda3\envs\cogppo\Lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\hxri\miniconda3\envs\cogppo\Lib\site-packages\torch\nn\modules\conv.py", line 463, in forward
    return self._conv_forward(input, self.weight, self.bias)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\hxri\miniconda3\envs\cogppo\Lib\site-packages\torch\nn\modules\conv.py", line 459, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt